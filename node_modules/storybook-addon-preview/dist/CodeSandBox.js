var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * Copyright (c) 2020-present NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
import * as React from "react";
import { getParameters } from "codesandbox/lib/api/define";
import { VANILLA_PRESET } from "./presets/Vanilla";
import { REACT_PRESET } from "./presets/React";
import { PREACT_PRESET } from "./presets/Preact";
import { ANGULAR_PRESET } from "./presets/Angular";
import { SVELTE_PRESET } from "./presets/Svelte";
import { VUE_PRESET } from "./presets/Vue";
import { LIT_PRESET } from "./presets/Lit";
var presets = {
    "react": REACT_PRESET,
    "preact": PREACT_PRESET,
    "angular": ANGULAR_PRESET,
    "svelte": SVELTE_PRESET,
    "vue": VUE_PRESET,
    "lit": LIT_PRESET,
    "vanilla": VANILLA_PRESET
};
export function previewCodeSandBoxHTML(params) {
    var html = params.html, cssFiles = params.cssFiles, jsFiles = params.jsFiles;
    return "<html>\n<head>\n    <title>Parcel Sandbox</title>\n    <meta charset=\"UTF-8\" />\n" + cssFiles.map(function (file) { return "\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"" + file + "\" />"; }) + "\n</head>\n\n<body>\n" + html + "\n" + jsFiles.map(function (file) { return "\n<script src=\"" + file + "\"></script>"; }) + "\n</body>\n</html>";
}
export function getCodeSandBox(param) {
    var framework = param.framework, _a = param.files, files = _a === void 0 ? {} : _a, _b = param.userDependencies, userDependencies = _b === void 0 ? [] : _b;
    var _c = presets[framework], dependencies = _c.dependencies, devDependencies = _c.devDependencies, template = _c.template, presetFiles = _c.files;
    var obj = {
        "package.json": {
            content: {
                dependencies: __assign({}, (dependencies || {}))
            }
        }
    };
    if (devDependencies) {
        obj["package.json"].content.devDependencies = __assign({}, devDependencies);
    }
    var packageDendencies = obj["package.json"].content.dependencies;
    userDependencies.forEach(function (userModule) {
        var result = /^(@*[^@]+)@*([^@/]+)*$/g.exec(userModule);
        var name = result ? result[1] : userModule;
        var version = result && result[2] ? result[2] : "latest";
        packageDendencies[name] = version;
    });
    if (template) {
        obj["sandbox.config.json"] = {
            content: {
                template: template
            }
        };
    }
    for (var fileName in presetFiles) {
        obj[fileName] = {
            content: presetFiles[fileName]
        };
    }
    for (var fileName in files) {
        var content = files[fileName];
        if (typeof content === "object") {
            var contentTemplate = content.template;
            if (contentTemplate === "html") {
                content = previewCodeSandBoxHTML(content);
            }
        }
        obj[fileName] = {
            content: content
        };
    }
    return getParameters({
        files: obj
    });
}
;
export default function CodeSandBox(_a) {
    var info = _a.info;
    var parameters = getCodeSandBox(info);
    return (React.createElement("form", { action: "https://codesandbox.io/api/v1/sandboxes/define", method: "POST", target: "_blank" },
        React.createElement("input", { type: "hidden", name: "parameters", value: parameters }),
        React.createElement("input", { type: "submit", value: "Open SandBox" })));
}
;
//# sourceMappingURL=CodeSandBox.js.map