var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
/**
 * Copyright (c) 2020-present NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
import addons, { makeDecorator } from '@storybook/addons';
import * as registerKnobs from "@storybook/addon-knobs/dist/registerKnobs";
function getKnobs() {
    var knobs = registerKnobs.manager.knobStore.getAll();
    var obj = {};
    for (var name_1 in knobs) {
        obj[name_1] = knobs[name_1].value;
    }
    return obj;
}
export var preview = function (parameter) {
    var channel = addons.getChannel();
    channel.emit("preview", parameter);
};
export function previewTemplate(strings) {
    var values = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        values[_i - 1] = arguments[_i];
    }
    return new Function("\n        var p = arguments[0];\n        var strings = " + JSON.stringify(strings) + ";\n        var values = " + JSON.stringify(values) + ";\n\n        function space(indent) {\n            var text = [];\n            for (var i = 0; i < indent; ++i) {\n                text.push(\" \");\n            }\n            return text.join(\"\");\n        }\n        function toObject(info, names) {\n            var quote = info.quote;\n            var indent = info.indent;\n            var endIndent = info.endIndent;\n            var separator = info.separator;\n            var joinSeparator = info.joinSeparator;\n            var endSeparator = info.endSeparator;\n            var objs = [\"{\"];\n            var length = names.length;\n\n            names.forEach(function (n, i) {\n                var v = p[n];\n\n                v = JSON.stringify(v);\n\n                objs.push(space(indent) + n + \": \" + v  + (i + 1 === length ? endSeparator : separator));\n            });\n            objs.push(space(endIndent) + \"}\");\n            return objs.join(joinSeparator);\n        }\n        var dirty = strings.reduce(function (prev, next, i) {\n            var name = values[i];\n\n            if (typeof name === \"undefined\") {\n                name = \"\";\n            }\n            var value = name;\n\n            if (Array.isArray(name)) {\n                var info = name[0];\n                var names = name.slice(1);\n\n                if (info.type === \"object\") {\n                    value = toObject(info, names);\n                }\n            } else if (name in p) {\n                value = p[name];\n            }\n\n            if (typeof value === \"object\") {\n                value = JSON.stringify(value);\n            }\n            return \"\" + prev + next  + value;\n        }, \"\");\n        return dirty;\n    ");
}
previewTemplate.object = function (props, options) {
    if (options === void 0) { options = {}; }
    var _a = options.indent, indent = _a === void 0 ? 4 : _a, _b = options.endIndent, endIndent = _b === void 0 ? indent - 4 : _b, _c = options.joinSeparator, joinSeparator = _c === void 0 ? "\n" : _c, _d = options.separator, separator = _d === void 0 ? "," : _d, _e = options.endSeparator, endSeparator = _e === void 0 ? separator : _e;
    return __spreadArrays([{
            type: "object",
            endIndent: endIndent,
            indent: indent,
            joinSeparator: joinSeparator,
            separator: separator,
            endSeparator: endSeparator
        }], props);
};
export var withPreview = makeDecorator({
    name: 'withPreview',
    parameterName: 'preview',
    wrapper: function (storyFn, context) {
        var channel = addons.getChannel();
        requestAnimationFrame(function () {
            channel.emit("knobs", getKnobs());
        });
        return storyFn(context);
    }
});
export * from "./code/consts";
export { previewFunction, codeIndent, convertGlobalCSS } from "./code/utils";
export * from "./codesandbox/Angular";
export * from "./codesandbox/Lit";
export * from "./codesandbox/React";
export * from "./codesandbox/Svelte";
export * from "./codesandbox/Vanilla";
export * from "./codesandbox/VanillaJS";
export * from "./codesandbox/Vue";
//# sourceMappingURL=index.js.map