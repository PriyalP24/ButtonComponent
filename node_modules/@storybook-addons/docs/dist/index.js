"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var addons_1 = __importStar(require("@storybook/addons"));
var core_events_1 = require("@storybook/core-events");
var inject_markdown_placeholders_1 = require("./lib/inject-markdown-placeholders");
var unescape_markdown_specific_1 = require("./lib/unescape-markdown-specific");
var constants_1 = require("./constants");
var params_1 = require("./params");
var isFirstLoad = true;
var nextContent;
exports.withDocs = function (_a) {
    var readme = _a.readme;
    return addons_1.makeDecorator({
        name: 'withDocs',
        parameterName: params_1.PARAM_KEY,
        wrapper: function (getStory, context) {
            var isCanvasView = window.location.href.match(/&embeded=true/) === null;
            var api = addons_1.default.getChannel();
            if (isCanvasView) {
                if (readme !== undefined) {
                    nextContent = typeof readme.content === 'string' ? readme.content : readme.content.default;
                    nextContent = unescape_markdown_specific_1.unescapeMarkdownSpecific(nextContent);
                    nextContent = inject_markdown_placeholders_1.injectMarkdownPlaceholders(nextContent, readme.placeholders);
                }
                if (isFirstLoad) {
                    api.on(core_events_1.STORY_CHANGED, function () {
                        setTimeout(function () {
                            api.emit(constants_1.ADD_README, { content: nextContent });
                        }, 0);
                        nextContent = undefined;
                    });
                    api.emit(constants_1.ADD_README, { content: nextContent });
                    isFirstLoad = false;
                }
            }
            return getStory(context);
        },
    });
};
