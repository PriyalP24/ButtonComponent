"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var HEADING_REGEXP_GLOBAL = /^(#{1,5})\s([А-яA-z].+)/gm;
var SYMBOL_REGEXP = /[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~’]/g;
var WHITESPACE_REGEXP = /\s/g;
exports.processMarkdownHeading = function (_a) {
    var markdown = _a.markdown, onVisit = _a.onVisit;
    var executed = null;
    var processedMarkdown = markdown;
    // eslint-disable-next-line no-cond-assign
    while ((executed = HEADING_REGEXP_GLOBAL.exec(markdown)) !== null) {
        var _b = __read(executed, 3), rawHeading = _b[0], level = _b[1], heading = _b[2];
        // prettier-ignore
        var sanitizedRawHeading = rawHeading
            .replace('(', '\\(')
            .replace(')', '\\)');
        var headingRegExp = new RegExp("^" + sanitizedRawHeading, 'm');
        var id = heading
            .toLowerCase()
            .replace(SYMBOL_REGEXP, '')
            .replace(WHITESPACE_REGEXP, '-');
        var component = "h" + level.length;
        var url = "#" + id;
        if (onVisit !== undefined) {
            onVisit({ level: level.length, url: url, text: heading });
        }
        processedMarkdown = processedMarkdown.replace(headingRegExp, "<" + component + " id=\"" + id + "\"><a class=\"anchor\" href=\"" + url + "\"></a>" + heading + "</" + component + ">\n");
    }
    return processedMarkdown;
};
