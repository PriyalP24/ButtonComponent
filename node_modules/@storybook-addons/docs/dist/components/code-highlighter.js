"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var prism_react_renderer_1 = __importStar(require("prism-react-renderer"));
var copy_to_clipboard_1 = __importDefault(require("copy-to-clipboard"));
var styled_1 = __importDefault(require("@emotion/styled"));
var copy_button_1 = require("./copy-button");
var theme = {
    plain: {
        backgroundColor: '#f5f5f5',
        color: '#111',
    },
    styles: [
        {
            style: { color: '#777' },
            types: ['comment'],
        },
        {
            style: { color: '#009688' },
            types: ['string', 'url', 'attr-value'],
        },
        {
            style: { color: '#660099' },
            types: ['number'],
        },
        {
            style: { color: '#777' },
            types: ['punctuation'],
        },
        {
            style: { color: '#00009f' },
            types: ['keyword', 'tag', 'atrule'],
        },
        {
            style: { color: '#777' },
            types: ['operator'],
        },
        {
            style: { color: '#111' },
            types: ['attr-name'],
        },
    ],
};
var CodeWrapper = styled_1.default.div(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  position: relative;\n"], ["\n  position: relative;\n"])));
var Pre = styled_1.default.pre(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  background-color: var(--color-typo-code);\n  border-radius: var(--border-radius);\n  color: var(--color-typo-primary);\n  font-family: var(--font-family-mono);\n  font-size: var(--size-text-code);\n  margin: 18px 0 18px;\n  max-height: 360px;\n  overflow-wrap: normal;\n  overflow: auto;\n  overflow: scroll;\n  padding: var(--space-s) var(--space-l);\n  tab-size: 4;\n  white-space: pre;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n"], ["\n  background-color: var(--color-typo-code);\n  border-radius: var(--border-radius);\n  color: var(--color-typo-primary);\n  font-family: var(--font-family-mono);\n  font-size: var(--size-text-code);\n  margin: 18px 0 18px;\n  max-height: 360px;\n  overflow-wrap: normal;\n  overflow: auto;\n  overflow: scroll;\n  padding: var(--space-s) var(--space-l);\n  tab-size: 4;\n  white-space: pre;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n"
    // TODO: Add line highlight.
])));
// TODO: Add line highlight.
exports.CodeHighlighter = function (_a) {
    var value = _a.value, language = _a.language;
    var onCopyClick = react_1.useCallback(function () {
        copy_to_clipboard_1.default(value);
    }, [value]);
    // Prism not parse tsx syntax, so we replace to ts.
    var normalizedLanguage = language.replace('tsx', 'ts');
    // TODO: remove style and take colors from css vars.
    return (react_1.default.createElement(CodeWrapper, null,
        react_1.default.createElement(prism_react_renderer_1.default, __assign({}, prism_react_renderer_1.defaultProps, { theme: theme, code: value, language: normalizedLanguage }), function (_a) {
            var style = _a.style, tokens = _a.tokens, getLineProps = _a.getLineProps, getTokenProps = _a.getTokenProps;
            return (react_1.default.createElement(Pre, { style: style }, tokens.map(function (line, i) { return (react_1.default.createElement("div", __assign({}, getLineProps({ line: line, key: i })), line.map(function (token, key) { return (react_1.default.createElement("span", __assign({}, getTokenProps({ token: token, key: key })))); }))); })));
        }),
        react_1.default.createElement(copy_button_1.CopyButton, { onClick: onCopyClick })));
};
var templateObject_1, templateObject_2;
